{"ast":null,"code":"import { authenticationService } from '../services/auth.service';\n\nfunction authHeader() {\n  // return authorization header with jwt token\n  if (authenticationService.accessToken) {\n    return {\n      Authorization: `Bearer ${authenticationService.accessToken}`\n    };\n  } else {\n    return {};\n  }\n}\n\nfunction isExpired() {\n  // return authorization header with jwt token\n  if (authenticationService.tokenExp && authenticationService.tokenExp < Date.now() / 1000) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function Fetch(url, options) {\n  const expired = isExpired();\n\n  if (expired) {\n    console.log('token exp');\n    authenticationService.refresh();\n  } else {\n    console.log('not exp');\n  }\n\n  let headers = authHeader();\n\n  if (options && options.headers) {\n    headers = Object.assign({}, options.headers, headers);\n    options.headers = headers;\n  } else {\n    options = {\n      headers\n    };\n  }\n\n  console.log('headers ', headers);\n  console.log('url ', url);\n  console.log('options ', options);\n  return fetch.apply(this, [url, options, ...arguments]);\n}","map":{"version":3,"sources":["/Users/tobeyasinugo/dev/facechat_django/frontend/src/helpers/auth-request.js"],"names":["authenticationService","authHeader","accessToken","Authorization","isExpired","tokenExp","Date","now","Fetch","url","options","expired","console","log","refresh","headers","Object","assign","fetch","apply","arguments"],"mappings":"AAAA,SAASA,qBAAT,QAAqC,0BAArC;;AAEA,SAASC,UAAT,GAAsB;AAClB;AACA,MAAID,qBAAqB,CAACE,WAA1B,EAAuC;AACnC,WAAO;AAAEC,MAAAA,aAAa,EAAG,UAASH,qBAAqB,CAACE,WAAY;AAA7D,KAAP;AACH,GAFD,MAEO;AACH,WAAO,EAAP;AACH;AACJ;;AAED,SAASE,SAAT,GAAqB;AACjB;AACA,MAAIJ,qBAAqB,CAACK,QAAtB,IAAkCL,qBAAqB,CAACK,QAAtB,GAAiCC,IAAI,CAACC,GAAL,KAAa,IAApF,EAA2F;AACvF,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ;;AAID,OAAO,SAASC,KAAT,CAAeC,GAAf,EAAoBC,OAApB,EAA6B;AAChC,QAAMC,OAAO,GAAGP,SAAS,EAAzB;;AACA,MAAIO,OAAJ,EAAa;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAb,IAAAA,qBAAqB,CAACc,OAAtB;AACH,GAHD,MAGO;AACHF,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAEH;;AAED,MAAIE,OAAO,GAAGd,UAAU,EAAxB;;AACA,MAAIS,OAAO,IAAIA,OAAO,CAACK,OAAvB,EAAgC;AAC5BA,IAAAA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,OAAO,CAACK,OAA1B,EAAmCA,OAAnC,CAAV;AACAL,IAAAA,OAAO,CAACK,OAAR,GAAkBA,OAAlB;AACH,GAHD,MAGO;AACHL,IAAAA,OAAO,GAAG;AACNK,MAAAA;AADM,KAAV;AAGH;;AACDH,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBE,OAAxB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,GAApB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,OAAxB;AACA,SAAOQ,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkB,CAACV,GAAD,EAAMC,OAAN,EAAe,GAAGU,SAAlB,CAAlB,CAAP;AACH","sourcesContent":["import { authenticationService} from '../services/auth.service';\n\nfunction authHeader() {\n    // return authorization header with jwt token\n    if (authenticationService.accessToken) {\n        return { Authorization: `Bearer ${authenticationService.accessToken}` };\n    } else {\n        return {};\n    }\n}\n\nfunction isExpired() {\n    // return authorization header with jwt token\n    if (authenticationService.tokenExp && authenticationService.tokenExp < Date.now() / 1000 ) {\n        return true\n    } else {\n        return false\n    }\n}\n\n\n\nexport function Fetch(url, options) {\n    const expired = isExpired()\n    if (expired) {\n        console.log('token exp')\n        authenticationService.refresh()\n    } else {\n        console.log('not exp')\n\n    }\n\n    let headers = authHeader()\n    if (options && options.headers) {\n        headers = Object.assign({}, options.headers, headers);\n        options.headers = headers\n    } else {\n        options = {\n            headers\n        }\n    }\n    console.log('headers ', headers);\n    console.log('url ', url);\n    console.log('options ', options);\n    return fetch.apply(this, [url, options, ...arguments]) \n}"]},"metadata":{},"sourceType":"module"}