{"ast":null,"code":"var _jsxFileName = \"/Users/tobeyasinugo/dev/facechat_django/frontend/src/pages/chat.js\";\nimport React from 'react';\nimport Publisher from '../components/Publisher';\nimport Subscriber from '../components/Subscriber';\nimport { OTSession, OTStreams, preloadScript } from 'opentok-react';\nimport opentokconfig from '../config';\nimport { withRouter } from \"react-router-dom\";\nimport './chat.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport config from '../config';\nimport { authenticationService } from '../services/auth.service';\nimport { wsService } from '../services/ws.service';\n\nconst OT = require('@opentok/client');\n\nconst qs = require('qs');\n\nclass Chat extends React.Component {\n  // Initial timeout duration as a class variable\n  constructor(props) {\n    super(props);\n    this.timeout = 250;\n\n    this.onWsEvent = data => {\n      console.log('ws event', data); //           if (typeof data.token != 'undefined' && typeof data.session_id != 'undefined' ) {\n      //                   console.log('Joining session', data.session_id);\n      //                  that.setState({session: data.session_id, token: data.token, connectionCount: 2})\n      //           }\n      //           if (typeof data.username != 'undefined' ) {\n      //              that.setState({username: data.username})\n      //           }\n    };\n\n    this.onWsError = err => {\n      console.log('Socket err', err);\n    };\n\n    this.onWsClose = () => {\n      console.log('Socket closed'); //     console.log(\n      //     `Socket is closed. Reconnect will be attempted in ${Math.min(\n      //         10000 / 1000,\n      //         (that.timeout + that.timeout) / 1000\n      //     )} second.`,\n      //     e.reason\n      // );\n      // that.timeout = that.timeout + that.timeout; //increment retry interval\n      // connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n    };\n\n    this.handle_user_details = data => {\n      if (typeof data.username != 'undefined') {\n        that.setState({\n          username: data.username\n        });\n      }\n    };\n\n    this.handle_paytok_credentials = data => {\n      if (typeof data.token != 'undefined' && typeof data.session_id != 'undefined') {\n        console.log('Joining session', data.session_id);\n        that.setState({\n          session: data.session_id,\n          token: data.token\n        });\n      }\n    };\n\n    this.check = () => {\n      const {\n        ws\n      } = this.state;\n      if (!ws || ws.readyState == WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.state = {\n      auth: null,\n      session: null,\n      token: null,\n      connectionCount: 0,\n      session: null,\n      ws: null,\n      username: null,\n      isConnected: false\n    };\n    this._isMounted = false;\n    this.sessionEventHandlers = {\n      connectionCreated: event => {\n        console.log(\"[NEW] connection created\", event);\n        var data = {\n          connectionId: event.connection.connectionId,\n          creationTime: event.connection.creationTime,\n          data: event.connection.data,\n          event: event.type,\n          sessionId: this.state.session,\n          parser: 'connection_created'\n        };\n        console.log('sending it', data);\n        authenticationService.ws.send(data);\n      },\n      connectionDestroyed: event => {\n        console.log(\"connection destroyed\", event);\n      },\n      sessionConnected: event => {\n        console.log(\"Client connect to a session\");\n      },\n      sessionDisconnected: event => {\n        console.log(\"Client disConnect to a session\");\n      },\n      sessionReconnected: event => {\n        console.log(\"session reconnected\");\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    let data = {\n      influencerUsername: this.props.match.params.influencer,\n      parser: 'exit_influencer_page'\n    };\n\n    if (this.state.ws) {\n      this.state.ws.next(data);\n    }\n  }\n\n  componentDidMount() {\n    this._isMounted = true; // https://stackoverflow.com/questions/52061476/cancel-all-subscriptions-and-asyncs-in-the-componentwillunmount-method-how\n\n    if (!this._isMounted || this.state.isConnected) {\n      return;\n    }\n\n    console.log(\"Mounted!\", this.state.auth, authenticationService.auth, authenticationService.auth.ws);\n    authenticationService.auth.subscribe(auth => {\n      console.log('chat auth.subscribe', auth);\n      authenticationService.refresh();\n      const ws_params = {\n        't': `Bearer ${auth.access}`\n      };\n      const ws = wsService.createWebSocketConnection(config.PAYTOK_WS_URL, ws_params);\n      this.setState({\n        auth,\n        ws\n      }, () => {\n        ws.subscribe(data => this.onWsEvent(data), err => this.onWsClose(err), () => this.onWsClose());\n        let data = {\n          influencerUsername: this.props.match.params.influencer,\n          parser: 'enter_influencer_page'\n        };\n        ws.next(data);\n        this.setState({\n          isConnected: true\n        });\n      });\n    }); // authenticationService.auth.ws.send(data)\n    // this.connect()\n\n    console.log('connected to session', this.state);\n  }\n\n  render() {\n    {\n      console.log('renderrrr', this.state);\n    }\n\n    if (this.state.session == null) {\n      if (this.state.username != null) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 21\n          }\n        }, \"Hi \", this.state.username, \" \");\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 21\n          }\n        }, \"Loading..\");\n      }\n    } else {\n      return /*#__PURE__*/React.createElement(OTSession, {\n        apiKey: opentokconfig.API_KEY,\n        sessionId: this.state.session,\n        token: this.state.token,\n        eventHandlers: this.sessionEventHandlers,\n        onError: this.onError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(OTStreams, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Subscriber, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Publisher, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n}\n\nexport default withRouter(Chat);","map":{"version":3,"sources":["/Users/tobeyasinugo/dev/facechat_django/frontend/src/pages/chat.js"],"names":["React","Publisher","Subscriber","OTSession","OTStreams","preloadScript","opentokconfig","withRouter","config","authenticationService","wsService","OT","require","qs","Chat","Component","constructor","props","timeout","onWsEvent","data","console","log","onWsError","err","onWsClose","handle_user_details","username","that","setState","handle_paytok_credentials","token","session_id","session","check","ws","state","readyState","WebSocket","CLOSED","connect","auth","connectionCount","isConnected","_isMounted","sessionEventHandlers","connectionCreated","event","connectionId","connection","creationTime","type","sessionId","parser","send","connectionDestroyed","sessionConnected","sessionDisconnected","sessionReconnected","componentWillUnmount","influencerUsername","match","params","influencer","next","componentDidMount","subscribe","refresh","ws_params","access","createWebSocketConnection","PAYTOK_WS_URL","render","API_KEY","onError"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Publisher from '../components/Publisher';\nimport Subscriber  from '../components/Subscriber';\nimport { OTSession, OTStreams, preloadScript } from 'opentok-react';\nimport opentokconfig from '../config';\nimport { withRouter } from \"react-router-dom\";\nimport './chat.css'\nimport 'semantic-ui-css/semantic.min.css';\n\nimport config from '../config';\nimport { authenticationService } from '../services/auth.service';\nimport  { wsService } from '../services/ws.service'\n\n\nconst OT = require('@opentok/client');\nconst qs = require('qs');\n\nclass Chat extends React.Component {\n  timeout = 250; // Initial timeout duration as a class variable\n\n  constructor(props) {\n    super(props);\n\n\n    this.state = {\n      auth: null,\n      session: null,\n      token: null,\n      connectionCount: 0,\n      session: null,\n      ws: null,\n      username: null,\n      isConnected: false,\n    }\n    \n    this._isMounted = false;\n\n this.sessionEventHandlers = {\n      connectionCreated: event =>  {\n          console.log(\"[NEW] connection created\", event);\n          var data = {\n            connectionId: event.connection.connectionId,\n            creationTime: event.connection.creationTime,\n            data: event.connection.data,\n            event: event.type,\n            sessionId: this.state.session,\n            parser: 'connection_created',\n\n          }\n          console.log('sending it', data)\n          authenticationService.ws.send(data);\n\n\n      },\n      connectionDestroyed: event =>  {\n          console.log(\"connection destroyed\", event);\n      },\n      sessionConnected: event => {\n          console.log(\"Client connect to a session\")\n      },\n      sessionDisconnected: event => {\n        console.log(\"Client disConnect to a session\")\n      },\n      sessionReconnected: event => {\n        console.log(\"session reconnected\")\n      },\n    };\n  }\n\n  componentWillUnmount() {\n\n    this._isMounted = false;\n    let data = {\n      influencerUsername: this.props.match.params.influencer,\n      parser: 'exit_influencer_page'\n    }\n    if (this.state.ws) {\n        this.state.ws.next(data)\n    }\n }\n \n  componentDidMount() {\n    this._isMounted = true; // https://stackoverflow.com/questions/52061476/cancel-all-subscriptions-and-asyncs-in-the-componentwillunmount-method-how\n    if (!this._isMounted || this.state.isConnected) {\n        return\n    }\n    console.log(\"Mounted!\", this.state.auth, authenticationService.auth, authenticationService.auth.ws)\n\n\n    authenticationService.auth.subscribe(auth => {\n      console.log('chat auth.subscribe', auth)\n      authenticationService.refresh()\n      const ws_params = { 't': `Bearer ${auth.access}`}\n      const ws = wsService.createWebSocketConnection(config.PAYTOK_WS_URL, ws_params)\n      this.setState({ auth, ws }, () => {\n\n      ws.subscribe(\n          (data) => this.onWsEvent(data),\n          (err) => this.onWsClose(err),\n          () => this.onWsClose(),\n      );\n      let data = {\n        influencerUsername: this.props.match.params.influencer,\n        parser: 'enter_influencer_page'\n      }\n      ws.next(data)\n      this.setState({ isConnected: true })\n\n      });\n    })\n\n    // authenticationService.auth.ws.send(data)\n\n    // this.connect()\n    console.log('connected to session', this.state)\n  }\n\n  onWsEvent = (data) => {\n    console.log('ws event', data)\n\n\n     //           if (typeof data.token != 'undefined' && typeof data.session_id != 'undefined' ) {\n  //                   console.log('Joining session', data.session_id);\n  //                  that.setState({session: data.session_id, token: data.token, connectionCount: 2})\n\n  //           }\n\n  //           if (typeof data.username != 'undefined' ) {\n  //              that.setState({username: data.username})\n\n  //           }\n\n  }\n\n  onWsError = (err) => {\n    console.log('Socket err', err)\n  }\n\n  onWsClose = () => {\n    console.log('Socket closed')\n\n        //     console.log(\n        //     `Socket is closed. Reconnect will be attempted in ${Math.min(\n        //         10000 / 1000,\n        //         (that.timeout + that.timeout) / 1000\n        //     )} second.`,\n        //     e.reason\n        // );\n\n        // that.timeout = that.timeout + that.timeout; //increment retry interval\n        // connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n  }\n\n\n\n  handle_user_details = (data) => {\n    if (typeof data.username != 'undefined' ) {\n        that.setState({username: data.username})\n\n    }\n\n  }\n\n\n  handle_paytok_credentials = (data) => {\n\n    if (typeof data.token != 'undefined' && typeof data.session_id != 'undefined' ) {\n      console.log('Joining session', data.session_id);\n      that.setState({session: data.session_id, token: data.token})\n\n    }\n    \n  }\n\n  //  connect = () => {\n  //       let token = authenticationService.accessToken\n  //       let params = { token }\n  //       let query_params = Object.entries(params).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join('&');\n\n  //       console.log('params', params)\n  //       var   ws = new WebSocket(`${config.PAYTOK_WS_URL}}/paytok/?${query_params}`)\n  //       let that = this; // cache the this\n  //       var connectInterval;\n  //       // websocket onopen event listener\n  //       ws.onopen = () => {\n  //           console.log(\"connected websocket main component\");\n\n  //           this.setState({ ws: ws });\n\n  //           that.timeout = 250; // reset timer to 250 on open of websocket connection\n  //           clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n  //       };\n  //       // websocket onclose event listener\n  //       ws.onclose = e => {\n  //           console.log(\n  //               `Socket is closed. Reconnect will be attempted in ${Math.min(\n  //                   10000 / 1000,\n  //                   (that.timeout + that.timeout) / 1000\n  //               )} second.`,\n  //               e.reason\n  //           );\n\n  //           that.timeout = that.timeout + that.timeout; //increment retry interval\n  //           connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n  //       };\n\n  //       // websocket onerror event listener\n  //       ws.onerror = err => {\n  //           console.error(\n  //               \"Socket encountered error: \",\n  //               err.message,\n  //               \"Closing socket\"\n  //           );\n\n  //           ws.close();\n  //       };\n\n  //       ws.addEventListener('message', function (event) {\n  //           console.log('Message from server ', event.data);\n  //           var data = JSON.parse(event.data)\n  //           if (typeof data.token != 'undefined' && typeof data.session_id != 'undefined' ) {\n  //                   console.log('Joining session', data.session_id);\n  //                  that.setState({session: data.session_id, token: data.token, connectionCount: 2})\n\n  //           }\n\n  //           if (typeof data.username != 'undefined' ) {\n  //              that.setState({username: data.username})\n\n  //           }\n\n  //       });\n  //   };\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n    check = () => {\n        const { ws } = this.state;\n        if (!ws || ws.readyState == WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n\n  render() {\n    {console.log('renderrrr', this.state)}\n    if (this.state.session == null ){\n\n       if (this.state.username != null) {\n             return <div>Hi {this.state.username} </div>\n\n       } else  {\n             return <div>Loading..</div>\n       }\n    } else {\n      return (\n          <OTSession\n          apiKey={opentokconfig.API_KEY}\n          sessionId={this.state.session}\n          token={this.state.token}\n          eventHandlers={this.sessionEventHandlers}\n          onError={this.onError}\n    >\n\n          <OTStreams>\n            <Subscriber/>\n        </OTStreams>\n        <Publisher/>\n      </OTSession>\n      )\n    }\n  }\n\n\n}\nexport default  withRouter(Chat) \n\n"]},"metadata":{},"sourceType":"module"}