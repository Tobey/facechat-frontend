{"ast":null,"code":"var _jsxFileName = \"/Users/tobeyasinugo/dev/facechat_django/frontend/src/pages/chat.js\";\nimport React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport Publisher from '../components/Publisher';\nimport Subscriber from '../components/Subscriber';\nimport { OTSession, OTStreams, preloadScript } from 'opentok-react';\nimport ProfileLayout from '../components/Layout';\nimport opentokconfig from '../config';\nimport config from '../config';\nimport { authenticationService } from '../services/auth.service';\nimport { wsService } from '../services/ws.service';\nimport './chat.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nconst OT = require('@opentok/client');\n\nconst qs = require('qs');\n\nclass Chat extends React.Component {\n  // Initial timeout duration as a class variable\n  constructor(props) {\n    super(props);\n    this.timeout = 250;\n\n    this.onWsEvent = data => {\n      console.log('ws event', data);\n\n      if (typeof data.callable != 'undefined') {\n        let hander = this.serverHandlers[data.callable];\n\n        if (typeof hander != 'undefined') {\n          hander(data);\n        } else {\n          console.log('[NO Handler]', data);\n        }\n      } else {\n        console.log('[UNHANLDED WS MSG]', data);\n      }\n    };\n\n    this.onWsError = err => {\n      console.log('Socket err', err);\n    };\n\n    this.onWsClose = () => {\n      console.log('Socket closed'); //     console.log(\n      //     `Socket is closed. Reconnect will be attempted in ${Math.min(\n      //         10000 / 1000,\n      //         (that.timeout + that.timeout) / 1000\n      //     )} second.`,\n      //     e.reason\n      // );\n      // that.timeout = that.timeout + that.timeout; //increment retry interval\n      // connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n    };\n\n    this.handle_user_details = data => {\n      if (typeof data.username != 'undefined') {\n        this.setState({\n          username: data.username\n        });\n      }\n    };\n\n    this.handle_paytok_credentials = data => {\n      if (typeof data.token != 'undefined' && typeof data.session_id != 'undefined') {\n        console.log('Joining session', data.session_id);\n        this.setState({\n          session: data.session_id,\n          token: data.token\n        });\n      }\n    };\n\n    this.serverHandlers = {\n      'user_details': this.handle_user_details,\n      'paytok_credentials': this.handle_paytok_credentials\n    };\n    this.state = {\n      auth: null,\n      session: null,\n      token: null,\n      connectionCount: 0,\n      session: null,\n      ws: null,\n      username: null,\n      isConnected: false\n    };\n    this._isMounted = false;\n    this.sessionEventHandlers = {\n      connectionCreated: event => {\n        console.log(\"[NEW] connection created\", event);\n        var data = {\n          connectionId: event.connection.connectionId,\n          creationTime: event.connection.creationTime,\n          data: event.connection.data,\n          event: event.type,\n          sessionId: this.state.session,\n          callable: 'connection_created'\n        };\n        console.log('sending it', data);\n        authenticationService.ws.send(data);\n      },\n      connectionDestroyed: event => {\n        console.log(\"connection destroyed\", event);\n      },\n      sessionConnected: event => {\n        console.log(\"Client connect to a session\");\n      },\n      sessionDisconnected: event => {\n        console.log(\"Client disConnect to a session\");\n      },\n      sessionReconnected: event => {\n        console.log(\"session reconnected\");\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    let data = {\n      influencerUsername: this.props.match.params.influencer,\n      callable: 'exit_influencer_page'\n    };\n\n    if (this.state.ws) {\n      this.state.ws.next(data);\n    }\n  }\n\n  componentDidMount() {\n    this._isMounted = true; // https://stackoverflow.com/questions/52061476/cancel-all-subscriptions-and-asyncs-in-the-componentwillunmount-method-how\n\n    if (!this._isMounted || this.state.isConnected) {\n      return;\n    }\n\n    console.log(\"Mounted!\", this.state.auth, authenticationService.auth, authenticationService.auth.ws);\n    authenticationService.auth.subscribe(auth => {\n      console.log('chat auth.subscribe', auth);\n      authenticationService.refresh();\n      const ws_params = {\n        't': `Bearer ${auth.access}`\n      };\n      const ws = wsService.createWebSocketConnection(config.PAYTOK_WS_URL, ws_params);\n      this.setState({\n        auth,\n        ws\n      }, () => {\n        ws.subscribe(data => this.onWsEvent(data), err => this.onWsClose(err), () => this.onWsClose());\n        let data = {\n          influencerUsername: this.props.match.params.influencer,\n          callable: 'enter_influencer_page'\n        };\n        ws.next(data);\n        this.setState({\n          isConnected: true\n        });\n      });\n    }); // authenticationService.auth.ws.send(data)\n    // this.connect()\n\n    console.log('connected to session', this.state);\n  }\n\n  //  connect = () => {\n  //       let token = authenticationService.accessToken\n  //       let params = { token }\n  //       let query_params = Object.entries(params).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join('&');\n  //       console.log('params', params)\n  //       var   ws = new WebSocket(`${config.PAYTOK_WS_URL}}/paytok/?${query_params}`)\n  //       let that = this; // cache the this\n  //       var connectInterval;\n  //       // websocket onopen event listener\n  //       ws.onopen = () => {\n  //           console.log(\"connected websocket main component\");\n  //           this.setState({ ws: ws });\n  //           that.timeout = 250; // reset timer to 250 on open of websocket connection\n  //           clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n  //       };\n  //       // websocket onclose event listener\n  //       ws.onclose = e => {\n  //           console.log(\n  //               `Socket is closed. Reconnect will be attempted in ${Math.min(\n  //                   10000 / 1000,\n  //                   (that.timeout + that.timeout) / 1000\n  //               )} second.`,\n  //               e.reason\n  //           );\n  //           that.timeout = that.timeout + that.timeout; //increment retry interval\n  //           connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n  //       };\n  //       // websocket onerror event listener\n  //       ws.onerror = err => {\n  //           console.error(\n  //               \"Socket encountered error: \",\n  //               err.message,\n  //               \"Closing socket\"\n  //           );\n  //           ws.close();\n  //       };\n  //       ws.addEventListener('message', function (event) {\n  //           console.log('Message from server ', event.data);\n  //           var data = JSON.parse(event.data)\n  //           if (typeof data.token != 'undefined' && typeof data.session_id != 'undefined' ) {\n  //                   console.log('Joining session', data.session_id);\n  //                  that.setState({session: data.session_id, token: data.token, connectionCount: 2})\n  //           }\n  //           if (typeof data.username != 'undefined' ) {\n  //              that.setState({username: data.username})\n  //           }\n  //       });\n  //   };\n\n  /**\n   * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n   */\n  // check = () => {\n  //     const { ws } = this.state;\n  //     if (!ws || ws.readyState == WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n  // };\n  render() {\n    {\n      console.log('renderrrr', this.state);\n    }\n\n    if (this.state.session == null) {\n      if (this.state.username != null) {\n        return /*#__PURE__*/React.createElement(ProfileLayout, {\n          username: this.state.username,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 21\n          }\n        });\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 21\n          }\n        }, \"Loading..\");\n      }\n    } else {\n      return /*#__PURE__*/React.createElement(OTSession, {\n        apiKey: opentokconfig.API_KEY,\n        sessionId: this.state.session,\n        token: this.state.token,\n        eventHandlers: this.sessionEventHandlers,\n        onError: this.onError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(OTStreams, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Subscriber, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Publisher, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n}\n\nexport default withRouter(Chat);","map":{"version":3,"sources":["/Users/tobeyasinugo/dev/facechat_django/frontend/src/pages/chat.js"],"names":["React","withRouter","Publisher","Subscriber","OTSession","OTStreams","preloadScript","ProfileLayout","opentokconfig","config","authenticationService","wsService","OT","require","qs","Chat","Component","constructor","props","timeout","onWsEvent","data","console","log","callable","hander","serverHandlers","onWsError","err","onWsClose","handle_user_details","username","setState","handle_paytok_credentials","token","session_id","session","state","auth","connectionCount","ws","isConnected","_isMounted","sessionEventHandlers","connectionCreated","event","connectionId","connection","creationTime","type","sessionId","send","connectionDestroyed","sessionConnected","sessionDisconnected","sessionReconnected","componentWillUnmount","influencerUsername","match","params","influencer","next","componentDidMount","subscribe","refresh","ws_params","access","createWebSocketConnection","PAYTOK_WS_URL","render","API_KEY","onError"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport Publisher from '../components/Publisher';\nimport Subscriber  from '../components/Subscriber';\nimport { OTSession, OTStreams, preloadScript } from 'opentok-react';\n\nimport ProfileLayout from '../components/Layout';\n\n\nimport opentokconfig from '../config';\nimport config from '../config';\nimport { authenticationService } from '../services/auth.service';\nimport  { wsService } from '../services/ws.service'\n\n\nimport './chat.css'\nimport 'semantic-ui-css/semantic.min.css';\n\nconst OT = require('@opentok/client');\nconst qs = require('qs');\n\nclass Chat extends React.Component {\n  timeout = 250; // Initial timeout duration as a class variable\n\n\n  constructor(props) {\n    super(props);\n\n    this.serverHandlers  = {\n      'user_details': this.handle_user_details,\n      'paytok_credentials': this.handle_paytok_credentials,\n    }\n\n    this.state = {\n      auth: null,\n      session: null,\n      token: null,\n      connectionCount: 0,\n      session: null,\n      ws: null,\n      username: null,\n      isConnected: false,\n    }\n    \n    this._isMounted = false;\n\n this.sessionEventHandlers = {\n      connectionCreated: event =>  {\n          console.log(\"[NEW] connection created\", event);\n          var data = {\n            connectionId: event.connection.connectionId,\n            creationTime: event.connection.creationTime,\n            data: event.connection.data,\n            event: event.type,\n            sessionId: this.state.session,\n            callable: 'connection_created',\n\n          }\n          console.log('sending it', data)\n          authenticationService.ws.send(data);\n\n\n      },\n      connectionDestroyed: event =>  {\n          console.log(\"connection destroyed\", event);\n      },\n      sessionConnected: event => {\n          console.log(\"Client connect to a session\")\n      },\n      sessionDisconnected: event => {\n        console.log(\"Client disConnect to a session\")\n      },\n      sessionReconnected: event => {\n        console.log(\"session reconnected\")\n      },\n    };\n  }\n\n  componentWillUnmount() {\n\n    this._isMounted = false;\n    let data = {\n      influencerUsername: this.props.match.params.influencer,\n      callable: 'exit_influencer_page'\n    }\n    if (this.state.ws) {\n        this.state.ws.next(data)\n    }\n }\n \n  componentDidMount() {\n    this._isMounted = true; // https://stackoverflow.com/questions/52061476/cancel-all-subscriptions-and-asyncs-in-the-componentwillunmount-method-how\n    if (!this._isMounted || this.state.isConnected) {\n        return\n    }\n    console.log(\"Mounted!\", this.state.auth, authenticationService.auth, authenticationService.auth.ws)\n\n\n    authenticationService.auth.subscribe(auth => {\n      console.log('chat auth.subscribe', auth)\n      authenticationService.refresh()\n      const ws_params = { 't': `Bearer ${auth.access}`}\n      const ws = wsService.createWebSocketConnection(config.PAYTOK_WS_URL, ws_params)\n      this.setState({ auth, ws }, () => {\n\n      ws.subscribe(\n          (data) => this.onWsEvent(data),\n          (err) => this.onWsClose(err),\n          () => this.onWsClose(),\n      );\n      let data = {\n        influencerUsername: this.props.match.params.influencer,\n        callable: 'enter_influencer_page'\n      }\n      ws.next(data)\n      this.setState({ isConnected: true })\n\n      });\n    })\n\n    // authenticationService.auth.ws.send(data)\n\n    // this.connect()\n    console.log('connected to session', this.state)\n  }\n\n  onWsEvent = (data) => {\n    console.log('ws event', data)\n\n    if (typeof data.callable != 'undefined') {\n      let hander = this.serverHandlers[data.callable]\n      if (typeof hander != 'undefined') {\n          hander(data)\n      } else {\n        console.log('[NO Handler]', data)\n      }\n\n    } else {\n      console.log('[UNHANLDED WS MSG]', data)\n    }\n\n  }\n\n  onWsError = (err) => {\n    console.log('Socket err', err)\n  }\n\n  onWsClose = () => {\n    console.log('Socket closed')\n\n        //     console.log(\n        //     `Socket is closed. Reconnect will be attempted in ${Math.min(\n        //         10000 / 1000,\n        //         (that.timeout + that.timeout) / 1000\n        //     )} second.`,\n        //     e.reason\n        // );\n\n        // that.timeout = that.timeout + that.timeout; //increment retry interval\n        // connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n  }\n\n\n  handle_user_details = (data) => {\n    if (typeof data.username != 'undefined' ) {\n        this.setState({username: data.username})\n\n    }\n\n  }\n\n\n  handle_paytok_credentials = (data) => {\n\n    if (typeof data.token != 'undefined' && typeof data.session_id != 'undefined' ) {\n      console.log('Joining session', data.session_id);\n      this.setState({session: data.session_id, token: data.token})\n\n    }\n    \n  }\n\n  //  connect = () => {\n  //       let token = authenticationService.accessToken\n  //       let params = { token }\n  //       let query_params = Object.entries(params).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join('&');\n\n  //       console.log('params', params)\n  //       var   ws = new WebSocket(`${config.PAYTOK_WS_URL}}/paytok/?${query_params}`)\n  //       let that = this; // cache the this\n  //       var connectInterval;\n  //       // websocket onopen event listener\n  //       ws.onopen = () => {\n  //           console.log(\"connected websocket main component\");\n\n  //           this.setState({ ws: ws });\n\n  //           that.timeout = 250; // reset timer to 250 on open of websocket connection\n  //           clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n  //       };\n  //       // websocket onclose event listener\n  //       ws.onclose = e => {\n  //           console.log(\n  //               `Socket is closed. Reconnect will be attempted in ${Math.min(\n  //                   10000 / 1000,\n  //                   (that.timeout + that.timeout) / 1000\n  //               )} second.`,\n  //               e.reason\n  //           );\n\n  //           that.timeout = that.timeout + that.timeout; //increment retry interval\n  //           connectInterval = setTimeout(this.check, Math.min(10000, that.timeout)); //call check function after timeout\n  //       };\n\n  //       // websocket onerror event listener\n  //       ws.onerror = err => {\n  //           console.error(\n  //               \"Socket encountered error: \",\n  //               err.message,\n  //               \"Closing socket\"\n  //           );\n\n  //           ws.close();\n  //       };\n\n  //       ws.addEventListener('message', function (event) {\n  //           console.log('Message from server ', event.data);\n  //           var data = JSON.parse(event.data)\n  //           if (typeof data.token != 'undefined' && typeof data.session_id != 'undefined' ) {\n  //                   console.log('Joining session', data.session_id);\n  //                  that.setState({session: data.session_id, token: data.token, connectionCount: 2})\n\n  //           }\n\n  //           if (typeof data.username != 'undefined' ) {\n  //              that.setState({username: data.username})\n\n  //           }\n\n  //       });\n  //   };\n    /**\n     * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n     */\n    // check = () => {\n    //     const { ws } = this.state;\n    //     if (!ws || ws.readyState == WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n    // };\n\n\n  render() {\n    {console.log('renderrrr', this.state)}\n\n    if (this.state.session == null ){\n\n       if (this.state.username != null) {\n             return <ProfileLayout \n                      username={this.state.username}\n              />\n\n       } else  {\n             return <div>Loading..</div>\n       }\n    } else {\n      return (\n          <OTSession\n          apiKey={opentokconfig.API_KEY}\n          sessionId={this.state.session}\n          token={this.state.token}\n          eventHandlers={this.sessionEventHandlers}\n          onError={this.onError}\n    >\n\n          <OTStreams>\n            <Subscriber/>\n        </OTStreams>\n        <Publisher/>\n      </OTSession>\n      )\n    }\n  }\n\n\n}\nexport default  withRouter(Chat) \n\n"]},"metadata":{},"sourceType":"module"}