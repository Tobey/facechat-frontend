{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { webSocket } from '@akanass/rx-socket-client';\nimport config from '../config';\nimport { handleResponse } from '../helpers/handle-response';\nimport { wsService } from './ws.service';\n\nvar jwtDecode = require('jwt-decode');\n\nconst Auth = new BehaviorSubject(JSON.parse(localStorage.getItem('auth'))); // const Ws = webSocket(`${config.PAYTOK_WS_URL}/paytok/?${Auth.auth}`);yarn add @akanass/rx-socket-clien√\n\nexport const authenticationService = {\n  login,\n  logout,\n  refresh,\n  auth: Auth.asObservable(),\n\n  get currentUser() {\n    return Auth.value && Auth.value.data.user_id;\n  },\n\n  get accessToken() {\n    return Auth.value && Auth.value.access;\n  },\n\n  get refreshToken() {\n    return Auth.value && Auth.value.refresh;\n  },\n\n  get tokenExp() {\n    return Auth.value && Auth.value.data.exp;\n  } // get WebSoc\n\n\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'email': username,\n      password\n    })\n  };\n  return fetch(`${config.PAYTOK_URL}/api/auth/jwt/create/`, requestOptions).then(handleResponse).then(data => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    console.log('login ;)');\n    const parsedData = jwtDecode(data.access);\n    const auth = {\n      'access': data.access,\n      'refresh': data.refresh,\n      'data': parsedData\n    };\n    localStorage.setItem('auth', JSON.stringify(auth));\n    let ws_params = {\n      token: data.access\n    };\n    const ws = wsService.createWebSocketConnection(config.PAYTOK_WS_URL, ws_params);\n    auth.ws = ws;\n    Auth.next(auth);\n    console.log(Auth); // auth.ws.connectionStatus$.subscribe(isConnected => console.log('connected', isConnected) );\n\n    if (ws) {\n      // ws.on('event').subscribe(data => console.log('ws', data)); // will display received data in console if event is fired\n      ws.connectionStatus$.subscribe(isConnected => isConnected ? console.log('Server connected') : console.log('Server disconnected'));\n      console.log('subscribed');\n    }\n\n    return auth;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('auth');\n  Auth.next(null);\n}\n\nfunction refresh() {\n  // remove user from local storage to log user out\n  if (Auth.refresh) {\n    console.log('refreshh the ting');\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'refres': Auth.refresh\n      })\n    };\n    return fetch(`${config.PAYTOK_URL}/api/auth/jwt/refresh/`, requestOptions).then(handleResponse).then(data => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      console.log('refres :/');\n      const parsedData = jwtDecode(data); // const auth = {\n      //     'access': data.access,\n      //     'refresh': data.refresh,\n      //     'data': parsedData,\n      // }\n      // localStorage.setItem('auth', JSON.stringify(auth));\n      // Auth.next(auth);\n      // console.log(Auth)\n\n      return data;\n    });\n  }\n}","map":{"version":3,"sources":["/Users/tobeyasinugo/dev/facechat_django/frontend/src/services/auth.service.js"],"names":["BehaviorSubject","webSocket","config","handleResponse","wsService","jwtDecode","require","Auth","JSON","parse","localStorage","getItem","authenticationService","login","logout","refresh","auth","asObservable","currentUser","value","data","user_id","accessToken","access","refreshToken","tokenExp","exp","username","password","requestOptions","method","headers","body","stringify","fetch","PAYTOK_URL","then","console","log","parsedData","setItem","ws_params","token","ws","createWebSocketConnection","PAYTOK_WS_URL","next","connectionStatus$","subscribe","isConnected","removeItem"],"mappings":"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","sourcesContent":["import { BehaviorSubject } from 'rxjs';\n\nimport { webSocket } from '@akanass/rx-socket-client';\n\nimport config from '../config';\nimport { handleResponse } from '../helpers/handle-response';\nimport  { wsService } from './ws.service'\n\nvar jwtDecode = require('jwt-decode');\n\nconst Auth = new BehaviorSubject(JSON.parse(localStorage.getItem('auth')));\n\n// const Ws = webSocket(`${config.PAYTOK_WS_URL}/paytok/?${Auth.auth}`);yarn add @akanass/rx-socket-clien√\n\n\n\nexport const authenticationService = {\n    login,\n    logout,\n    refresh,\n    auth: Auth.asObservable(),\n    get currentUser() { return Auth.value && Auth.value.data.user_id },\n    get accessToken() { return Auth.value &&  Auth.value.access },\n    get refreshToken() { return  Auth.value &&  Auth.value.refresh },\n    get tokenExp() { return  Auth.value &&  Auth.value.data.exp }\n    // get WebSoc\n};\n\nfunction login(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ 'email': username, password })\n    };\n\n    return fetch(`${config.PAYTOK_URL}/api/auth/jwt/create/`, requestOptions)\n        .then(handleResponse)\n        .then(data => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            console.log('login ;)')\n\n            const parsedData = jwtDecode(data.access)\n            const auth = {\n                'access': data.access,\n                'refresh': data.refresh,\n                'data': parsedData,\n            }\n            localStorage.setItem('auth', JSON.stringify(auth));\n            let ws_params = { token: data.access}\n            const ws =  wsService.createWebSocketConnection(config.PAYTOK_WS_URL, ws_params)\n            auth.ws = ws\n            Auth.next(auth);\n            console.log(Auth)\n\n            // auth.ws.connectionStatus$.subscribe(isConnected => console.log('connected', isConnected) );\n            if (ws) {\n                // ws.on('event').subscribe(data => console.log('ws', data)); // will display received data in console if event is fired\n                ws.connectionStatus$.subscribe(isConnected => isConnected ? console.log('Server connected'): console.log('Server disconnected'));\n                console.log('subscribed')\n    \n            }\n\n            return auth;\n        });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('auth');\n    Auth.next(null);\n}\n\n\nfunction refresh() {\n    // remove user from local storage to log user out\n    if (Auth.refresh) {\n        console.log('refreshh the ting')\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ 'refres': Auth.refresh })\n        };\n    \n        return fetch(`${config.PAYTOK_URL}/api/auth/jwt/refresh/`, requestOptions)\n            .then(handleResponse)\n            .then(data => {\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\n                console.log('refres :/')\n    \n                const parsedData = jwtDecode(data)\n                // const auth = {\n                //     'access': data.access,\n                //     'refresh': data.refresh,\n                //     'data': parsedData,\n                // }\n                // localStorage.setItem('auth', JSON.stringify(auth));\n                // Auth.next(auth);\n                // console.log(Auth)\n    \n                return data;\n            });\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}