{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { webSocket } from '@akanass/rx-socket-client';\nimport config from '../config';\nimport { handleResponse } from '../helpers/handle-response';\n\nvar jwtDecode = require('jwt-decode');\n\nconst Auth = new BehaviorSubject(JSON.parse(localStorage.getItem('auth'))); // const Ws = webSocket(`${config.PAYTOK_WS_URL}/paytok/?${Auth.auth}`);yarn add @akanass/rx-socket-clien√\n\nexport const authenticationService = {\n  login,\n  logout,\n  refresh,\n  authHeader,\n  isExpired,\n  auth: Auth.asObservable(),\n\n  get currentUser() {\n    return Auth.value && Auth.value.data.user_id;\n  },\n\n  get accessToken() {\n    return Auth.value && Auth.value.access;\n  },\n\n  get refreshToken() {\n    return Auth.value && Auth.value.refresh;\n  },\n\n  get tokenExp() {\n    return Auth.value && Auth.value.data.exp;\n  } // get WebSoc\n\n\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'email': username,\n      password\n    })\n  };\n  return fetch(`${config.PAYTOK_URL}/api/auth/jwt/create/`, requestOptions).then(handleResponse).then(data => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    console.log('login ;)');\n    const parsedData = jwtDecode(data.access);\n    const auth = {\n      'access': data.access,\n      'refresh': data.refresh,\n      'data': parsedData\n    };\n    localStorage.setItem('auth', JSON.stringify(auth));\n    Auth.next(auth);\n    console.log(Auth);\n    return auth;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('auth');\n  Auth.next(null);\n}\n\nfunction refresh() {\n  // remove user from local storage to log user out\n  let auth = JSON.parse(localStorage.getItem('auth'));\n\n  if (isExpired()) {\n    console.log('REFRESHHHING ACCESS TOKEN', auth);\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'refresh': auth.refresh\n      })\n    };\n    console.log('refreshh the ting', requestOptions, {\n      'refresh': auth.refresh\n    });\n    return fetch(`${config.PAYTOK_URL}/api/auth/jwt/refresh/`, requestOptions).then(handleResponse).then(data => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      console.log('refresh :/', data);\n      const parsedData = jwtDecode(data.access);\n      data.data = parsedData;\n      auth = Object.assign({}, auth, data);\n      localStorage.setItem('auth', JSON.stringify(auth));\n      Auth.next(auth);\n      return data;\n    });\n  }\n}\n\nfunction authHeader() {\n  // return authorization header with jwt token\n  if (authenticationService.accessToken) {\n    return {\n      Authorization: `Bearer ${authenticationService.accessToken}`\n    };\n  } else {\n    return {};\n  }\n}\n\nfunction isExpired() {\n  // return authorization header with jwt token\n  if (authenticationService.tokenExp && authenticationService.tokenExp < Date.now() / 1000) {\n    return true;\n  } else {\n    return false;\n  }\n}","map":{"version":3,"sources":["/Users/tobeyasinugo/dev/facechat_django/frontend/src/services/auth.service.js"],"names":["BehaviorSubject","webSocket","config","handleResponse","jwtDecode","require","Auth","JSON","parse","localStorage","getItem","authenticationService","login","logout","refresh","authHeader","isExpired","auth","asObservable","currentUser","value","data","user_id","accessToken","access","refreshToken","tokenExp","exp","username","password","requestOptions","method","headers","body","stringify","fetch","PAYTOK_URL","then","console","log","parsedData","setItem","next","removeItem","Object","assign","Authorization","Date","now"],"mappings":"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","sourcesContent":["import { BehaviorSubject } from 'rxjs';\n\nimport { webSocket } from '@akanass/rx-socket-client';\n\nimport config from '../config';\nimport { handleResponse } from '../helpers/handle-response';\n\nvar jwtDecode = require('jwt-decode');\n\nconst Auth = new BehaviorSubject(JSON.parse(localStorage.getItem('auth')));\n\n// const Ws = webSocket(`${config.PAYTOK_WS_URL}/paytok/?${Auth.auth}`);yarn add @akanass/rx-socket-clien√\n\n\n\nexport const authenticationService = {\n    login,\n    logout,\n    refresh,\n    authHeader,\n    isExpired,\n    auth: Auth.asObservable(),\n    get currentUser() { return Auth.value && Auth.value.data.user_id },\n    get accessToken() { return Auth.value &&  Auth.value.access },\n    get refreshToken() { return  Auth.value &&  Auth.value.refresh },\n    get tokenExp() { return  Auth.value &&  Auth.value.data.exp }\n    // get WebSoc\n};\n\nfunction login(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ 'email': username, password })\n    };\n\n    return fetch(`${config.PAYTOK_URL}/api/auth/jwt/create/`, requestOptions)\n        .then(handleResponse)\n        .then(data => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            console.log('login ;)')\n\n            const parsedData = jwtDecode(data.access)\n            const auth = {\n                'access': data.access,\n                'refresh': data.refresh,\n                'data': parsedData,\n            }\n            localStorage.setItem('auth', JSON.stringify(auth));\n    \n            Auth.next(auth);\n            console.log(Auth)\n            return auth;\n        });\n}\n\nfunction logout(){\n    // remove user from local storage to log user out\n    localStorage.removeItem('auth');\n    Auth.next(null);\n}\n\n\nfunction refresh() {\n    // remove user from local storage to log user out\n    let auth = JSON.parse(localStorage.getItem('auth'))\n    if (isExpired()) {\n        console.log('REFRESHHHING ACCESS TOKEN', auth)\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ 'refresh': auth.refresh })\n        };\n        console.log('refreshh the ting' ,requestOptions, { 'refresh': auth.refresh })\n        return fetch(`${config.PAYTOK_URL}/api/auth/jwt/refresh/`, requestOptions)\n            .then(handleResponse)\n            .then(data => {\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\n                console.log('refresh :/', data)\n                const parsedData = jwtDecode(data.access)\n                data.data = parsedData\n                auth = Object.assign({}, auth, data);\n                localStorage.setItem('auth', JSON.stringify(auth));\n                Auth.next(auth);\n                return data;\n            });\n    }\n}\n\n\nfunction authHeader() {\n    // return authorization header with jwt token\n    if (authenticationService.accessToken) {\n        return { Authorization: `Bearer ${authenticationService.accessToken}` };\n    } else {\n        return {};\n    }\n}\n\nfunction isExpired() {\n    // return authorization header with jwt token\n    if (authenticationService.tokenExp && authenticationService.tokenExp < Date.now() / 1000 ) {\n        return true\n    } else {\n        return false\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}