{"version":3,"file":"rx-socket-client.subject.js","sourceRoot":"","sources":["../../../src/lib/rx-socket-client.subject.ts"],"names":[],"mappings":"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","sourcesContent":["import { Buffer } from 'buffer';\nimport { interval, Observable, Subject, Subscription } from 'rxjs';\nimport { root } from 'rxjs/internal/util/root';\nimport { distinctUntilChanged, filter, map, takeWhile } from 'rxjs/operators';\nimport { WebSocketSubject, WebSocketSubjectConfig } from 'rxjs/webSocket';\n\nimport * as ws from 'websocket';\n\n/**\n * Extends default config to add reconnection data and serializer\n */\nexport interface RxSocketClientConfig {\n    /** The url of the socket server to connect to */\n    url: string;\n    /** The protocol to use to connect */\n    protocol?: string | Array<string>;\n    /**\n     * A WebSocket constructor to use. This is useful for mocking a WebSocket\n     * for testing purposes\n     */\n    WebSocketCtor?: { new(url: string, protocol?: string | Array<string>): WebSocket };\n    /** Sets the `binaryType` property of the underlying WebSocket. */\n    binaryType?: 'blob' | 'arraybuffer';\n    /** Sets the reconnection interval value. */\n    reconnectInterval?: number;\n    /** Sets the reconnection attempts value. */\n    reconnectAttempts?: number;\n}\n\n/** Type of message sent to server */\nexport type WebSocketMessage = string | Buffer | ArrayBuffer | Blob | ArrayBufferView;\n\n/** Type of message received from server */\nexport type WebSocketMessageServer = {\n    event: string;\n    data: string;\n}\n\n/** Type of binary received from server */\nexport type WebSocketBinaryServer = Buffer | ArrayBuffer | Blob | ArrayBufferView;\n\n/**\n * Class definition\n */\nexport class RxSocketClientSubject<T> extends Subject<T> {\n    // Observable for reconnection stream\n    private _reconnectionObservable: Observable<number>;\n    // WebSocketSubjectConfig instance\n    private _wsSubjectConfig: WebSocketSubjectConfig<T>;\n    // WebSocketSubject instance\n    private _socket: WebSocketSubject<any>;\n    // Subject for connection status stream\n    private _connectionStatus$: Subject<boolean>;\n    // Socket Subscription\n    private _socketSubscription: Subscription;\n    // Reconnection Subscription\n    private _reconnectionSubscription: Subscription;\n    // Reconnect interval\n    private _reconnectInterval: number;\n    // Reconnect attempts\n    private _reconnectAttempts: number;\n\n    /**\n     * Class constructor\n     *\n     * @param urlConfigOrSource\n     */\n    constructor(urlConfigOrSource: string | RxSocketClientConfig) {\n        super();\n\n        // define connection status subject\n        this._connectionStatus$ = new Subject<boolean>();\n\n        // set reconnect interval\n        if ((urlConfigOrSource as RxSocketClientConfig).reconnectInterval) {\n            this._reconnectInterval = (urlConfigOrSource as RxSocketClientConfig).reconnectInterval;\n        } else {\n            this._reconnectInterval = 5000;\n        }\n\n        // set reconnect attempts\n        if ((urlConfigOrSource as RxSocketClientConfig).reconnectAttempts) {\n            this._reconnectAttempts = (urlConfigOrSource as RxSocketClientConfig).reconnectAttempts;\n        } else {\n            this._reconnectAttempts = 10;\n        }\n\n        // check type of constructor's parameter to add url in config\n        if (typeof urlConfigOrSource === 'string') {\n            // create minimum config object\n            this._wsSubjectConfig = Object.assign({}, { url: urlConfigOrSource });\n        } else {\n            // create minimum config object\n            this._wsSubjectConfig = Object.assign({}, { url: urlConfigOrSource.url });\n        }\n\n        // add protocol in config\n        if ((urlConfigOrSource as RxSocketClientConfig).protocol) {\n            Object.assign(this._wsSubjectConfig, { protocol: (urlConfigOrSource as RxSocketClientConfig).protocol });\n        }\n\n        // node environment\n        if (!root.WebSocket) {\n            root[ 'WebSocket' ] = ws[ 'w3cwebsocket' ];\n        }\n\n        // add WebSocketCtor in config\n        if ((urlConfigOrSource as RxSocketClientConfig).WebSocketCtor) {\n            Object.assign(this._wsSubjectConfig, { WebSocketCtor: (urlConfigOrSource as RxSocketClientConfig).WebSocketCtor });\n        }\n\n        // add binaryType in config\n        if ((urlConfigOrSource as RxSocketClientConfig).binaryType) {\n            Object.assign(this._wsSubjectConfig, { binaryType: (urlConfigOrSource as RxSocketClientConfig).binaryType });\n        }\n\n        // add default data in config\n        Object.assign(this._wsSubjectConfig, {\n            deserializer: this._deserializer,\n            serializer: this._serializer,\n            openObserver: {\n                next: () => {\n                    this._connectionStatus$.next(true);\n                }\n            },\n            closeObserver: {\n                next: () => {\n                    this._cleanSocket();\n                    this._connectionStatus$.next(false);\n                }\n            }\n        });\n\n        // connect socket\n        this._connect();\n\n        // connection status subscription\n        this.connectionStatus$.subscribe(isConnected => {\n            if (!this._reconnectionObservable && typeof (isConnected) === 'boolean' && !isConnected) {\n                this._reconnect();\n            }\n        });\n    }\n\n    /**\n     * Returns connection status observable\n     *\n     * @return {Observable<boolean>}\n     */\n    get connectionStatus$(): Observable<boolean> {\n        return this._connectionStatus$\n            .pipe(\n                distinctUntilChanged()\n            );\n    }\n\n    /**\n     * Function to send data by socket\n     *\n     * @param data\n     */\n    send(data: any): void {\n        this._socket.next(data);\n    }\n\n    /**\n     * Function to handle text response for given event from server\n     *\n     * @example <caption>UTF Text Message from server</caption>\n     *\n     * const message = {\n     *  type: 'utf8',\n     *  utf8Data: {\n     *      event: 'data',\n     *      data: 'Data from the server'\n     *  }\n     * }\n     *\n     * @example <caption>Simple Text Message from server</caption>\n     *\n     * const message = {\n     *  event: 'data',\n     *  data: 'Data from the server'\n     * }\n     *\n     * @param event represents value inside {utf8Data.event} or {event} from server response\n     *\n     *  @value complete | <any>\n     *  @example <caption>Event type</caption>\n     *\n     *  if (event === 'complete') => handle Observable's complete\n     *  else handle Observable's success\n     *\n     * @param cb is the function executed if event matches the response from the server\n     */\n    on(event: string | 'close', cb: (data?: any) => void): void {\n        this._message$<WebSocketMessageServer>(event)\n            .subscribe(\n                (message: WebSocketMessageServer): void => cb(message.data),\n                /* istanbul ignore next */\n                () => undefined,\n                (): void => {\n                    /* istanbul ignore else */\n                    if (event === 'close') {\n                        cb();\n                    }\n                }\n            );\n    }\n\n    /**\n     * Function to handle bytes response from server\n     *\n     * @example <caption>Bytes Message from server</caption>\n     *\n     * const message = {\n     *  type: 'binary',\n     *  binaryData: <Buffer 74 6f 74 6f>\n     * }\n     *\n     * @example <caption>Simple Bytes Message from server</caption>\n     *\n     * const message = <Buffer 74 6f 74 6f>\n     *\n     * @param cb is the function executed if event matches the response from the server\n     */\n    onBytes(cb: (data: WebSocketBinaryServer) => void): void {\n        this.onBytes$()\n            .subscribe(\n                (message: WebSocketBinaryServer): void => cb(message)\n            );\n    }\n\n    /**\n     * Same as `on` method but with Observable response\n     *\n     * @param event represents value inside {utf8Data.event} or {event} from server response\n     *\n     * @return {Observable<any>}\n     */\n    on$(event: string): Observable<any> {\n        return this._message$<WebSocketMessageServer>(event)\n            .pipe(\n                map(_ => _.data)\n            );\n    }\n\n    /**\n     * Function to handle socket close event from server with Observable\n     *\n     * @return {Observable<void>}\n     */\n    onClose$(): Observable<void> {\n        return new Observable(observer => {\n            this.subscribe(\n                /* istanbul ignore next */\n                () => undefined,\n                /* istanbul ignore next */\n                () => undefined,\n                () => {\n                    observer.next();\n                    observer.complete();\n                });\n        });\n    }\n\n    /**\n     * Returns formatted binary from server with Observable\n     *\n     * @return {Observable<WebSocketBinaryServer>}\n     *\n     * @private\n     */\n    onBytes$(): Observable<WebSocketBinaryServer> {\n        return this\n            .pipe(\n                map((message: any): any =>\n                    (message.type && message.type === 'binary' && message.binaryData) ?\n                        message.binaryData :\n                        message\n                )\n            );\n    }\n\n    /**\n     * Function to emit data for given event to server\n     *\n     * @param event type of data for the server request\n     * @param data request data\n     */\n    emit(event: string, data: any): void {\n        this.send({ event, data });\n    }\n\n    /**\n     * Returns formatted and filtered message from server for given event with Observable\n     *\n     * @param {string | \"close\"} event represents value inside {utf8Data.event} or {event} from server response\n     *\n     * @return {Observable<WebSocketMessageServer>}\n     *\n     * @private\n     */\n    private _message$<WebSocketMessageServer>(event: string | 'close'): Observable<WebSocketMessageServer> {\n        return this\n            .pipe(\n                map((message: any): any =>\n                    (message.type && message.type === 'utf8' && message.utf8Data) ?\n                        message.utf8Data :\n                        message\n                ),\n                filter((message: any): boolean =>\n                    message.event &&\n                    message.event !== 'close' &&\n                    message.event === event &&\n                    message.data\n                )\n            );\n    }\n\n    /**\n     * Function to clean socket data\n     *\n     * @private\n     */\n    private _cleanSocket(): void {\n        /* istanbul ignore else */\n        if (this._socketSubscription) {\n            this._socketSubscription.unsubscribe();\n        }\n        this._socket = undefined;\n    }\n\n    /**\n     * Function to clean reconnection data\n     *\n     * @private\n     */\n    private _cleanReconnection(): void {\n        /* istanbul ignore else */\n        if (this._reconnectionSubscription) {\n            this._reconnectionSubscription.unsubscribe();\n        }\n        this._reconnectionObservable = undefined;\n    }\n\n    /**\n     * Function to create socket and subscribe to it\n     *\n     * @private\n     */\n    private _connect() {\n        this._socket = new WebSocketSubject(this._wsSubjectConfig);\n        this._socketSubscription = this._socket.subscribe(\n            (m: any) => {\n                this.next(m);\n            },\n            () => {\n                /* istanbul ignore if */\n                if (!this._socket) {\n                    this._cleanReconnection();\n                    this._reconnect();\n                }\n            }\n        );\n    }\n\n    /**\n     * Function to reconnect socket\n     *\n     * @private\n     */\n    private _reconnect(): void {\n        this._reconnectionObservable = interval(this._reconnectInterval)\n            .pipe(\n                takeWhile((v, index) => index < this._reconnectAttempts && !this._socket)\n            );\n\n        this._reconnectionSubscription = this._reconnectionObservable.subscribe(\n            () => this._connect(),\n            /* istanbul ignore next */\n            () => undefined,\n            () => {\n                this._cleanReconnection();\n                if (!this._socket) {\n                    this.complete();\n                    this._connectionStatus$.complete();\n                }\n            }\n        );\n    }\n\n    /**\n     * Default deserializer\n     *\n     * @param e\n     *\n     * @return {any}\n     * @private\n     */\n    private _deserializer(e: MessageEvent): T {\n        try {\n            return JSON.parse(e.data);\n        } catch (err) {\n            return e.data;\n        }\n    };\n\n    /**\n     * Default serializer\n     *\n     * @param data\n     *\n     * @return {WebSocketMessage}\n     * @private\n     */\n    private _serializer(data: any): WebSocketMessage {\n        return typeof (data) === 'string' || Buffer.isBuffer(data) ? data : JSON.stringify(data);\n    };\n}\n"]}